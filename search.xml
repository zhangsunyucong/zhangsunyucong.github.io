<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[《火影忍者》--鸣人和雏田]]></title>
      <url>/2017/12/28/huoying/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><hr>
<p><img src="http://o8bym0zmt.bkt.clouddn.com/huoying_mingren_z.jpeg?imageView2/2/w/800" alt="鸣人和雏田"></p>
<p>那个时候所有人只是把鸣人当做孤儿看待。他长相最多只能算一般，成绩吊车尾，缺家教，没才华，家世没有，血统没有，智商没有，然后还调皮爱恶作剧。<br><a id="more"></a></p>
<p><img src="http://o8bym0zmt.bkt.clouddn.com/huoying_1.jpg?imageView2/2/w/640" alt=""></p>
<p>除非傻子才会喜欢那时的鸣人。但是雏田硬是喜欢上了，这一喜欢，不仅坚持了好多年，而且还因为这份喜欢，改变了自己。</p>
<p><img src="http://o8bym0zmt.bkt.clouddn.com/huoying_3.jpg?imageView2/2/w/800" alt=""></p>
<p>雏田她硬是透过了种种外在因素，一眼就看清楚了鸣人的内在：阳光，乐观，有梦想，能努力，坚持到底，不服输。可以看出她是多么强大的主见，不理会别人看法的主见。<br><img src="http://o8bym0zmt.bkt.clouddn.com/huoying_2.jpg?imageView2/2/w/800" alt=""></p>
<p>雏田总是在默默注视着鸣人，一直支持着他，追赶着他。</p>
<p>你知道当你一个人面临绝望的时候，此时却有一个义无反顾的身影挡在你面前，保护你，是什么感觉吗？</p>
<p>在佩恩来袭，鸣人最为脆弱的时候，挡在他身前保护他。鸣人在十尾的木遁下无处可逃时，她也毅然决然的挡在他身前。<br>那么一个弱弱小小的女孩子，她的勇敢和坚毅却超乎寻常的强大。</p>
<p><img src="http://o8bym0zmt.bkt.clouddn.com/huoying_4.jpg?imageView2/2/w/2000" alt=""></p>
<p><img src="http://o8bym0zmt.bkt.clouddn.com/huoying_5.jpg?imageView2/2/w/600" alt=""><br><img src="http://o8bym0zmt.bkt.clouddn.com/huoying_6.jpg?imageView2/2/w/600" alt=""><br><img src="http://o8bym0zmt.bkt.clouddn.com/huoying_7.jpg?imageView2/2/w/600" alt=""><br><img src="http://o8bym0zmt.bkt.clouddn.com/huoying_8.jpg?imageView2/2/w/600" alt=""><br><img src="http://o8bym0zmt.bkt.clouddn.com/huoying_9.jpg?imageView2/2/w/600" alt=""><br><img src="http://o8bym0zmt.bkt.clouddn.com/huoying_10.jpg?imageView2/2/w/600" alt=""></p>
<p>两个人第一次去约会，鸣人却因为没钱请不起高级料理，不知道怎么开口。雏田用白眼看鸣人的钱包，然后主动说去吃一乐拉面。</p>
<p><img src="http://o8bym0zmt.bkt.clouddn.com/huooying_11.jpg?imageView2/2/w/700" alt=""></p>
<p>忍界大战开始中。《宁次之死》，让雏田和鸣人打击沉重，鸣人的意志开始动摇，在鸣人内心的防线即将崩溃时，雏田强忍失去亲人的伤痛，一巴掌打醒鸣人，告诉鸣人是宁次用生命换取他活下去的用意，告诉鸣人要清醒，要秉持自己的信念，不要放弃自己的忍道，鼓励他带领大家继续战斗。<br>雏田她看似弱不禁风的外表下其实有着很强大的内心和很坚强的意志。<br>忍界大战胜利后，鸣人成为救世主。</p>
<p><img src="http://o8bym0zmt.bkt.clouddn.com/huoying20.jpg?imageView2/2/w/600" alt=""><br><img src="http://o8bym0zmt.bkt.clouddn.com/huoying21.jpg?imageView2/2/w/600" alt=""><br><img src="http://o8bym0zmt.bkt.clouddn.com/huoying22.jpg?imageView2/2/w/600" alt=""><br><img src="http://o8bym0zmt.bkt.clouddn.com/huoying23.jpg?imageView2/2/w/600" alt=""><br><img src="http://o8bym0zmt.bkt.clouddn.com/huoying24.jpg?imageView2/2/w/600" alt=""><br><img src="http://o8bym0zmt.bkt.clouddn.com/huoying25.jpg?imageView2/2/w/600" alt=""></p>
<p>多年之后，鸣人的儿子博人问鸣人：“爸爸，你年轻的时候干了什么伟大的事啊？”<br>鸣人摸了摸他的头，然后说：“我用了十五年，帮我曾经最喜欢的女生追回了她的丈夫。”儿子又问：“那妈妈呢？”鸣人眼里光线都温柔了：“妈妈坚持爱到了我爱她的那一天。“</p>
<p><img src="http://o8bym0zmt.bkt.clouddn.com/huoying_30.jpg?imageView2/2/w/600" alt=""></p>
]]></content>
      
        
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[android和nodejs搭建一个应用]]></title>
      <url>/2017/12/25/android-encryption/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><hr>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>为什么想写这一篇文章呢？做android的开发也有两年的时间了，就想把以前学到的一些东西记录下来。于是首先就想在github.com上开一个项目<a href="https://github.com/zhangsunyucong/MVPDemo" target="_blank" rel="noopener">MVPDemo</a>,将一些自己认为比较好的知识点都串联起来。</p>
<p>主要目的：<br>1、初步认识和使用MVP、dagger2和rxJava2<br>2、使用对称和非对称加密加强前端与后台的安全机制<br>3、前后台的socket交互实现</p>
<p>其中3、中的socket实现，我专门建了一个github仓库<a href="https://github.com/zhangsunyucong/NodeTestDemo" target="_blank" rel="noopener">NodeTestDemo</a>，这个仓库不仅仅实现了前端的普通接口，还提供了一个socket服务。</p>
<h3 id="android端实现"><a href="#android端实现" class="headerlink" title="android端实现"></a>android端实现</h3><p>1、采用了MVP架构，使用dagger2对象依赖注入框架解耦MVP的各个组件<br>2、界面采用了autolayout进行兼容适配，UI尺寸标准是720*1080.页面效果仿微信。<br>3、rxjava2、rxlifecycle2，rxbinding2等Rx系列的初级使用<br>4、与后台服务器接口交互使用了retrofit2，交互的数据格式为json<br>5、自定义retrofit2的ConverterFactory和Interceptor实现统一加解密交互的数据流程<br>6、事件总线eventbus3、控件注入框架butterknife、GreenDao3对象关系映射数据库的使用<br>7、socket的前端简单实现<br>8、PDF文档库android-pdf-viewer的使用<br>9、使用jsoup解析csdn网站的html页面获取博主的博客信息<br>10、接入bugly。可以使用budly跟踪异常奔溃信息和bugly基于tinker的热修复。<br>11、接入腾讯X5内核浏览器服务代替原生的webview<br>12、页面路由Arouter的初步使用<br>13、app端出现异常，在杀死应用前，启动异常页面并允许用户点击重启<br>14、Cmake的使用。可以将敏感或者需要保密的数据使用jni保护，如第三方开发者平台的appid等</p>
<h3 id="后台安全数据安全交互机制"><a href="#后台安全数据安全交互机制" class="headerlink" title="后台安全数据安全交互机制"></a>后台安全数据安全交互机制</h3><p>1、后台服务器使用了leancloud和nodejs搭建。<a href="https://github.com/zhangsunyucong/NodeTestDemo" target="_blank" rel="noopener">nodejs服务器源码</a><br>2、android端的数据加密流程：<br>（1）生产用RSA加解密的公钥和私钥，保存好。将公钥分配给前端。<br>（2）后台为android终端分配appid，同时后台也保存一份appid，应用每次启动时产生一个AES加密的appkey（key每次启动都是不同）<br>（3）将请求参数按参数名的字典顺序排序得到signString，然后在signString后追加appid，再使用appkey将字符串进行AES加密得到sign。<br>（4）将appkey经过RSA公钥加密后得到aesKey。再将aesKey（RSA加密）、sign和加密signString传给后台。<br>（5）后台使用RSA私钥解密aesKey得到appkey，使用appkey解密sign和signString加appi得到的两个字符串，将两个字符串验证对比。<br>（6）如果要求服务器只允许一定时间范围内的请求，可以添加时间戳作为接口签名的一部分，防止重放攻击。</p>
]]></content>
      
        
        <tags>
            
            <tag> android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[二进制和种类]]></title>
      <url>/2017/12/22/binary-classify/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><hr>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>话回我刚刚毕业来到深圳时，作为一个android菜鸟在一个大神波哥的指导下，学到了很多东西。其中，二进制和分类就是我印象最深的。想按自己理解记录一下。</p>
<p>想一下，有这样的需求：一个物体有一个种类属性，它这个属性有很多相互独立可以相加的值，也就是它有很多种情况，而且一个物体可同时具有其中一个或者多个情况。而我们想用一个数字就表示它的所有情况（这就是数学思维，总把东西抽象化）。</p>
<p>来个具体的，用于表示一个人是否有高血压，高血糖，高血脂这种属性。这个属性可以有各种情况的值，一个人可以只是有高血压、高血糖或者高血脂，也可以有“三高”。那我们如何用一个十进制的值来表示一个人的这个属性的各种情呢？</p>
<p>我们可以让十进制数字的二进制表示的每一位代表一种情况，运用二进制的位运算来表示和判断它的各种情况。</p>
<h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>还是上面举的例子。二进制的每一位代表一种情况，三种情况我们可以用二进制的四位表示就可以。其他更多的情况，可以用更多的位来表示。我们约定结果的格式表示为：二进制，十进制。</p>
<blockquote>
<p>高血压： 0001，1    。—表示一个人只有高血压<br>高血糖： 0010，2    。—表示一个人只有高血糖<br>高血脂： 0100，4    。—表示一个人只有高血脂</p>
</blockquote>
<p>那如何表示其他各种情况呢？</p>
<blockquote>
<p>表示一个人有高血压和高血糖：0001 | 0010 = 0011，3<br>表示一个人有高血压和高血脂：0001 | 0100 = 0101，5<br>表示一个人有高血糖和高血脂：0010 | 0100 = 0110，6<br>表示一个人有高血压、高血糖和高血脂： 0001 | 0010 | 0100 = 0111，7</p>
</blockquote>
<p>我们就说，这就是各种情况“相加”。</p>
<p>如果要从多种情况中减除一种或者多种情况，又如何操作呢？<br>比如代表“三高”的7，我们如何从中减除高血压这种情况。</p>
<blockquote>
<p>7 &amp; (~0001) = 0111 &amp; (~0001) = 0111 &amp; 1110 = 0110，6</p>
</blockquote>
<p>说明：自身取“非”是为了不影响原来其他的各种情况，只改变自身那种情况的位。减除多种情况，以此类推。这就是情况的“相减”</p>
<p>如果给我们一个十进制：7，我们又如何知道它表示有多少种情况呢？</p>
<blockquote>
<p>1、是否有高血压 0001？<br>7 &amp; 0001 = 0001 即 0111 &amp; 0001 = 0001<br>2、是否有高血糖？<br>7 &amp; 0010 = 0010 即 0111 &amp; 0010 = 0010<br>3、是否有高血脂？<br>7 &amp; 0100 = 0100 即 0111 &amp; 0100 = 0100</p>
</blockquote>
<p>这实际就是，位的与运算是否等于自身。这就是各种情况的判断方法。</p>
]]></content>
      
        
        <tags>
            
            <tag> 基础知识 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读《人类简史》和《未来简史》]]></title>
      <url>/2017/12/12/about-history/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><hr>
<h3 id="读前提取论点"><a href="#读前提取论点" class="headerlink" title="读前提取论点"></a>读前提取论点</h3><ol>
<li>人类因为自然的一次偶然的基础而出现。智人摆脱了基因的宿命，开始用语言交流，可以说故事了，慢慢产生了各种概念，如神，社会，国家，配偶，金钱等等。</li>
<li>智慧的产生，源于人的反思和内心。</li>
<li>现在人只是生活在自己编造的故事里，正是因为故事才赋予人以意义。</li>
<li>从历史谈到现在，指出万物皆是算法，不同的算法，只是意识的有无和不同。</li>
<li>未来很多东西会被人类写的算法所取代，甚至会出现新的人类阶级：无用阶级和超人类。</li>
<li>超人类甚至可以足够强大，是长生的，可以操作万物，记忆不再只存于大脑，甚至可以存在于“云”中。</li>
</ol>
<p>最后，这两本书其实也是正在述说着故事。未完待续。。。</p>
]]></content>
      
        
        <tags>
            
            <tag> 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用nginx负载均衡nodejs]]></title>
      <url>/2017/12/06/node-and-nginx/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这篇文章适合熟悉nodejs的同学观看。主要是关于如何使用nginx做反向代理和负载均衡nodejs的多个实例的配置流程，nodejs实例可以是分布在同一台主机上或者不同的主机上的多个实例。</p>
<p>主要内容有</p>
<ul>
<li>在同一主机创建nodejs多个实例</li>
<li>详细讲解ngnix.conf文件的每项配置的作用</li>
</ul>
<h3 id="在同一主机创建nodejs多个实例"><a href="#在同一主机创建nodejs多个实例" class="headerlink" title="在同一主机创建nodejs多个实例"></a>在同一主机创建nodejs多个实例</h3><p>我的nodejs环境：</p>
<ul>
<li>window 7 64位</li>
<li>nodejs v8.1.3</li>
<li>webstorm 2017版</li>
</ul>
<hr>
<p>根目录/server.js文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var timeout = require(&apos;connect-timeout&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">// 设置模板引擎,路径在根目录+public中</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;public&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;ejs&apos;);</span><br><span class="line"></span><br><span class="line">app.use(express.static(&apos;public&apos;));</span><br><span class="line"></span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line">// 设置默认超时时间</span><br><span class="line">app.use(timeout(&apos;15s&apos;));</span><br><span class="line">//请求体</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">//cookie</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">//注册HTTP消息头部信息</span><br><span class="line">app.use(</span><br><span class="line">    function(req, res, next) &#123;</span><br><span class="line">        res.set(</span><br><span class="line">            &#123;</span><br><span class="line">                &apos;Content-Type&apos;: &apos;text/html&apos;,</span><br><span class="line">                &apos;Access-Control-Allow-Origin&apos;: &apos;*&apos;,</span><br><span class="line">                &apos;Access-Control-Allow-Rememberme&apos;: true,</span><br><span class="line">                &apos;Access-Control-Allow-HttpOnly&apos;: false,</span><br><span class="line">                &apos;Access-Control-Allow-Methods&apos;: &apos;POST, GET, PUT, DELETE, OPTIONS&apos;,</span><br><span class="line">                &apos;Access-Control-Allow-Credentials&apos;: true, //false,</span><br><span class="line">                &apos;Access-Control-Max-Age&apos;: &apos;86400&apos;, // 24 hours</span><br><span class="line">                &apos;Access-Control-Allow-Headers&apos;: &apos;X-Requested-With, X-HTTP-Method-Override, Content-Type, Accept&apos;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        //decodeURI(req.url)</span><br><span class="line">        console.log(&apos;%s %s&apos;, req.method, req.url);</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">//首页</span><br><span class="line">app.get(&apos;/&apos;, function(req, res) &#123;</span><br><span class="line">    res.render(&apos;index1&apos;, &#123; currentTime: new Date() &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">    // 如果任何一个路由都没有返回响应，则抛出一个 404 异常给后续的异常处理器</span><br><span class="line">    if (!res.headersSent) &#123;</span><br><span class="line">        var err = new Error(&apos;Not Found&apos;);</span><br><span class="line">        err.status = 404;</span><br><span class="line">        next(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 错误处理</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">    if (req.timedout &amp;&amp; req.headers.upgrade === &apos;websocket&apos;) &#123;</span><br><span class="line">        // 忽略 websocket 的超时</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var statusCode = err.status || 500;</span><br><span class="line">    if (statusCode === 500) &#123;</span><br><span class="line">        console.error(err.stack || err);</span><br><span class="line">    &#125;</span><br><span class="line">    if (req.timedout) &#123;</span><br><span class="line">        console.error(&apos;请求超时: url=%s, timeout=%d, 请确认方法执行耗时很长，或没有正确的 response 回调。&apos;, req.originalUrl, err.timeout);</span><br><span class="line">    &#125;</span><br><span class="line">    res.status(statusCode);</span><br><span class="line">    // 默认不输出异常详情</span><br><span class="line">    var error = &#123;&#125;;</span><br><span class="line">    if (app.get(&apos;env&apos;) === &apos;development&apos;) &#123;</span><br><span class="line">        // 如果是开发环境，则将异常堆栈输出到页面，方便开发调试</span><br><span class="line">        error = err;</span><br><span class="line">    &#125;</span><br><span class="line">    res.render(&apos;error&apos;, &#123;</span><br><span class="line">        message: err.message,</span><br><span class="line">        error: error</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function catchGlobalError(err) &#123;</span><br><span class="line">    // 注册全局未捕获异常处理器</span><br><span class="line">    process.on(&apos;uncaughtException&apos;, function(err) &#123;</span><br><span class="line">        console.error(&apos;Caught exception:&apos;, err.stack);</span><br><span class="line">    &#125;);</span><br><span class="line">    process.on(&apos;unhandledRejection&apos;, function(reason, p) &#123;</span><br><span class="line">        console.error(&apos;Unhandled Rejection at: Promise &apos;, p, &apos; reason: &apos;, reason.stack);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建两个服务器实体</span><br><span class="line">var server = require(&apos;http&apos;).createServer(app);</span><br><span class="line">var server1 = require(&apos;http&apos;).createServer(app);</span><br><span class="line"></span><br><span class="line">//服务器监听端口</span><br><span class="line">var PORT = parseInt(process.env.PORT || 3000);</span><br><span class="line">var PORT1 = PORT + 1;</span><br><span class="line"></span><br><span class="line">server.listen(PORT, function (err) &#123;</span><br><span class="line">    console.log(&apos;Node app is running on port:&apos;, PORT);</span><br><span class="line">    catchGlobalError(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server1.listen(PORT1, function (err) &#123;</span><br><span class="line">    console.log(&apos;Node app is running on port:&apos;, PORT1);</span><br><span class="line">    catchGlobalError(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>根目录/views/error.ejs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;Error&lt;/title&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;/stylesheets/style.css&quot;&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;&lt;%= message %&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;&lt;%= error.status %&gt;&lt;/h2&gt;</span><br><span class="line">    &lt;pre&gt;&lt;%= error.stack %&gt;&lt;/pre&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<p>根目录/views/index.ejs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;title&gt;nodejs 和 nginx&lt;/title&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;./stylesheets/style.css&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">      &lt;body&gt;</span><br><span class="line">      &lt;p&gt;&lt;h3&gt;Hello world&lt;/h3&gt;&lt;/p&gt;</span><br><span class="line">      &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="ngnix配置文件"><a href="#ngnix配置文件" class="headerlink" title="ngnix配置文件"></a>ngnix配置文件</h3><p>nginx.config</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line">	</span><br><span class="line">	upstream nodeproxy &#123;</span><br><span class="line">		server 192.168.10.137:3000 weight=10;       </span><br><span class="line">        server 127.0.0.1:3001 weight=12;   </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8089;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">			proxy_pass  http://nodeproxy; #与upstream的名称一致</span><br><span class="line">			proxy_redirect  default; </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">        # concurs with nginx&apos;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="nginx常用命令"><a href="#nginx常用命令" class="headerlink" title="nginx常用命令"></a>nginx常用命令</h3><p>在nginx的安装根目录下，打开命令行工具，运行。</p>
<p>启动nginx：start nginx<br>重新加载配置：nginx -s reload<br>重新打开日志：nginx -s reopen</p>
<p>关闭nginx：<br>快速停止：nginx -s stop<br>有序关闭：nginx -s quit</p>
<p>如果遇到启动不了nginx，可能是监听的端口被占用。<br>使用命令：netstat -aon | findstr :80<br>查询一下</p>
<p>用浏览器访问localhost:8089,我的测试的结果是：</p>
<blockquote>
<p>“D:\WebStorm 2017.2.1\bin\runnerw.exe” D:\nodejs\node.exe D:\collect\leancloud\jiangebuluo\NodeTestDemo\myServer.js<br>Node app is running on port: 3000<br>Node app is running on port: 3001<br>服务器监听的IP: 192.168.10.137<br>服务器监听的IP: 192.168.10.137<br>服务器监听的IP: 127.0.0.1<br>服务器监听的IP: 127.0.0.1<br>服务器监听的IP: 127.0.0.1<br>服务器监听的IP: 127.0.0.1<br>服务器监听的IP: 127.0.0.1<br>服务器监听的IP: 127.0.0.1<br>服务器监听的IP: 192.168.10.137<br>服务器监听的IP: 192.168.10.137</p>
</blockquote>
<hr>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>另外贴出一个ubuntu的详细配置讲解。来自<a href="https://www.cnblogs.com/hunttown/p/5759959.html" target="_blank" rel="noopener">猎手家园</a>的博客<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br></pre></td><td class="code"><pre><span class="line">#定义Nginx运行的用户和用户组</span><br><span class="line">user www www;</span><br><span class="line"></span><br><span class="line">#nginx进程数，建议设置为等于CPU总核心数。</span><br><span class="line">worker_processes 8;</span><br><span class="line"> </span><br><span class="line">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span><br><span class="line">error_log /usr/local/nginx/logs/error.log info;</span><br><span class="line"></span><br><span class="line">#进程pid文件</span><br><span class="line">pid /usr/local/nginx/logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">#指定进程可以打开的最大描述符：数目</span><br><span class="line">#工作模式与连接数上限</span><br><span class="line">#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。</span><br><span class="line">#现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。</span><br><span class="line">#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events</span><br><span class="line">&#123;</span><br><span class="line">    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型</span><br><span class="line">    #是Linux 2.6以上版本内核中的高性能网络I/O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。</span><br><span class="line">    #补充说明：</span><br><span class="line">    #与apache相类，nginx针对不同的操作系统，有不同的事件模型</span><br><span class="line">    #A）标准事件模型</span><br><span class="line">    #Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll</span><br><span class="line">    #B）高效事件模型</span><br><span class="line">    #Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。</span><br><span class="line">    #Epoll：使用于Linux内核2.6版本及以后的系统。</span><br><span class="line">    #/dev/poll：使用于Solaris 7 11/99+，HP/UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。</span><br><span class="line">    #Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。</span><br><span class="line">    use epoll;</span><br><span class="line"></span><br><span class="line">    #单个进程最大连接数（最大连接数=连接数*进程数）</span><br><span class="line">    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。</span><br><span class="line">    worker_connections 65535;</span><br><span class="line"></span><br><span class="line">    #keepalive超时时间。</span><br><span class="line">    keepalive_timeout 60;</span><br><span class="line"></span><br><span class="line">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。</span><br><span class="line">    #分页大小可以用命令getconf PAGESIZE 取得。</span><br><span class="line">    #[root@web001 ~]# getconf PAGESIZE</span><br><span class="line">    #4096</span><br><span class="line">    #但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。</span><br><span class="line">    client_header_buffer_size 4k;</span><br><span class="line"></span><br><span class="line">    #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span><br><span class="line">    open_file_cache max=65535 inactive=60s;</span><br><span class="line"></span><br><span class="line">    #这个是指多长时间检查一次缓存的有效信息。</span><br><span class="line">    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.</span><br><span class="line">    open_file_cache_valid 80s;</span><br><span class="line"></span><br><span class="line">    #open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</span><br><span class="line">    #语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.</span><br><span class="line">    open_file_cache_min_uses 1;</span><br><span class="line">    </span><br><span class="line">    #语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件是记录cache错误.</span><br><span class="line">    open_file_cache_errors on;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span><br><span class="line">http</span><br><span class="line">&#123;</span><br><span class="line">    #文件扩展名与文件类型映射表</span><br><span class="line">    include mime.types;</span><br><span class="line"></span><br><span class="line">    #默认文件类型</span><br><span class="line">    default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #默认编码</span><br><span class="line">    #charset utf-8;</span><br><span class="line"></span><br><span class="line">    #服务器名字的hash表大小</span><br><span class="line">    #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.</span><br><span class="line">    server_names_hash_bucket_size 128;</span><br><span class="line"></span><br><span class="line">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</span><br><span class="line">    client_header_buffer_size 32k;</span><br><span class="line"></span><br><span class="line">    #客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。</span><br><span class="line">    large_client_header_buffers 4 64k;</span><br><span class="line"></span><br><span class="line">    #设定通过nginx上传文件的大小</span><br><span class="line">    client_max_body_size 8m;</span><br><span class="line"></span><br><span class="line">    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span><br><span class="line">    #sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。</span><br><span class="line">    sendfile on;</span><br><span class="line"></span><br><span class="line">    #开启目录列表访问，合适下载服务器，默认关闭。</span><br><span class="line">    autoindex on;</span><br><span class="line"></span><br><span class="line">    #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span><br><span class="line">    tcp_nopush on;</span><br><span class="line">     </span><br><span class="line">    tcp_nodelay on;</span><br><span class="line"></span><br><span class="line">    #长连接超时时间，单位是秒</span><br><span class="line">    keepalive_timeout 120;</span><br><span class="line"></span><br><span class="line">    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span><br><span class="line">    fastcgi_connect_timeout 300;</span><br><span class="line">    fastcgi_send_timeout 300;</span><br><span class="line">    fastcgi_read_timeout 300;</span><br><span class="line">    fastcgi_buffer_size 64k;</span><br><span class="line">    fastcgi_buffers 4 64k;</span><br><span class="line">    fastcgi_busy_buffers_size 128k;</span><br><span class="line">    fastcgi_temp_file_write_size 128k;</span><br><span class="line"></span><br><span class="line">    #gzip模块设置</span><br><span class="line">    gzip on; #开启gzip压缩输出</span><br><span class="line">    gzip_min_length 1k;    #最小压缩文件大小</span><br><span class="line">    gzip_buffers 4 16k;    #压缩缓冲区</span><br><span class="line">    gzip_http_version 1.0;    #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span><br><span class="line">    gzip_comp_level 2;    #压缩等级</span><br><span class="line">    gzip_types text/plain application/x-javascript text/css application/xml;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><br><span class="line">    gzip_vary on;</span><br><span class="line"></span><br><span class="line">    #开启限制IP连接数的时候需要使用</span><br><span class="line">    #limit_zone crawler $binary_remote_addr 10m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #负载均衡配置</span><br><span class="line">    upstream piao.jd.com &#123;</span><br><span class="line">     </span><br><span class="line">        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span><br><span class="line">        server 127.0.0.1:3000 weight=3;</span><br><span class="line">        server 127.0.0.1:3001 weight=2;</span><br><span class="line"></span><br><span class="line">        #nginx的upstream目前支持4种方式的分配</span><br><span class="line">        #1、轮询（默认）</span><br><span class="line">        #每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span><br><span class="line">        #2、weight</span><br><span class="line">        #指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span><br><span class="line">        #例如：</span><br><span class="line">        #upstream bakend &#123;</span><br><span class="line">        #    server 192.168.0.14 weight=10;</span><br><span class="line">        #    server 192.168.0.15 weight=10;</span><br><span class="line">        #&#125;</span><br><span class="line">        #2、ip_hash</span><br><span class="line">        #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span><br><span class="line">        #例如：</span><br><span class="line">        #upstream bakend &#123;</span><br><span class="line">        #    ip_hash;</span><br><span class="line">        #    server 192.168.0.14:88;</span><br><span class="line">        #    server 192.168.0.15:80;</span><br><span class="line">        #&#125;</span><br><span class="line">        #3、fair（第三方）</span><br><span class="line">        #按后端服务器的响应时间来分配请求，响应时间短的优先分配。</span><br><span class="line">        #upstream backend &#123;</span><br><span class="line">        #    server server1;</span><br><span class="line">        #    server server2;</span><br><span class="line">        #    fair;</span><br><span class="line">        #&#125;</span><br><span class="line">        #4、url_hash（第三方）</span><br><span class="line">        #按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</span><br><span class="line">        #例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</span><br><span class="line">        #upstream backend &#123;</span><br><span class="line">        #    server squid1:3128;</span><br><span class="line">        #    server squid2:3128;</span><br><span class="line">        #    hash $request_uri;</span><br><span class="line">        #    hash_method crc32;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        #tips:</span><br><span class="line">        #upstream bakend&#123;#定义负载均衡设备的Ip及设备状态&#125;&#123;</span><br><span class="line">        #    ip_hash;</span><br><span class="line">        #    server 127.0.0.1:9090 down;</span><br><span class="line">        #    server 127.0.0.1:8080 weight=2;</span><br><span class="line">        #    server 127.0.0.1:6060;</span><br><span class="line">        #    server 127.0.0.1:7070 backup;</span><br><span class="line">        #&#125;</span><br><span class="line">        #在需要使用负载均衡的server中增加 proxy_pass http://bakend/;</span><br><span class="line"></span><br><span class="line">        #每个设备的状态设置为:</span><br><span class="line">        #1.down表示单前的server暂时不参与负载</span><br><span class="line">        #2.weight为weight越大，负载的权重就越大。</span><br><span class="line">        #3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误</span><br><span class="line">        #4.fail_timeout:max_fails次失败后，暂停的时间。</span><br><span class="line">        #5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span><br><span class="line"></span><br><span class="line">        #nginx支持同时设置多组的负载均衡，用来给不用的server来使用。</span><br><span class="line">        #client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug</span><br><span class="line">        #client_body_temp_path设置记录文件的目录 可以设置最多3层目录</span><br><span class="line">        #location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    #虚拟主机的配置</span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">        #监听端口</span><br><span class="line">        listen 80;</span><br><span class="line"></span><br><span class="line">        #域名可以有多个，用空格隔开</span><br><span class="line">        server_name www.jd.com jd.com;</span><br><span class="line">        index index.html index.htm index.php;</span><br><span class="line">        root /data/www/jd;</span><br><span class="line"></span><br><span class="line">        #对******进行负载均衡</span><br><span class="line">        location ~ .*.(php|php5)?$</span><br><span class="line">        &#123;</span><br><span class="line">            fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">            fastcgi_index index.php;</span><br><span class="line">            include fastcgi.conf;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        #图片缓存时间设置</span><br><span class="line">        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">        &#123;</span><br><span class="line">            expires 10d;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        #JS和CSS缓存时间设置</span><br><span class="line">        location ~ .*.(js|css)?$</span><br><span class="line">        &#123;</span><br><span class="line">            expires 1h;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        #日志格式设定</span><br><span class="line">        #$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；</span><br><span class="line">        #$remote_user：用来记录客户端用户名称；</span><br><span class="line">        #$time_local： 用来记录访问时间与时区；</span><br><span class="line">        #$request： 用来记录请求的url与http协议；</span><br><span class="line">        #$status： 用来记录请求状态；成功是200，</span><br><span class="line">        #$body_bytes_sent ：记录发送给客户端文件主体内容大小；</span><br><span class="line">        #$http_referer：用来记录从那个页面链接访问过来的；</span><br><span class="line">        #$http_user_agent：记录客户浏览器的相关信息；</span><br><span class="line">        #通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。</span><br><span class="line">        log_format access &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">        &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">        &apos;&quot;$http_user_agent&quot; $http_x_forwarded_for&apos;;</span><br><span class="line">         </span><br><span class="line">        #定义本虚拟主机的访问日志</span><br><span class="line">        access_log  /usr/local/nginx/logs/host.access.log  main;</span><br><span class="line">        access_log  /usr/local/nginx/logs/host.access.404.log  log404;</span><br><span class="line">         </span><br><span class="line">        #对 &quot;/&quot; 启用反向代理</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://127.0.0.1:88;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">             </span><br><span class="line">            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">             </span><br><span class="line">            #以下是一些反向代理的配置，可选。</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line"></span><br><span class="line">            #允许客户端请求的最大单文件字节数</span><br><span class="line">            client_max_body_size 10m;</span><br><span class="line"></span><br><span class="line">            #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class="line">            #如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。</span><br><span class="line">            #无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误</span><br><span class="line">            client_body_buffer_size 128k;</span><br><span class="line"></span><br><span class="line">            #表示使nginx阻止HTTP应答代码为400或者更高的应答。</span><br><span class="line">            proxy_intercept_errors on;</span><br><span class="line"></span><br><span class="line">            #后端服务器连接的超时时间_发起握手等候响应超时时间</span><br><span class="line">            #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class="line">            proxy_connect_timeout 90;</span><br><span class="line"></span><br><span class="line">            #后端服务器数据回传时间(代理发送超时)</span><br><span class="line">            #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</span><br><span class="line">            proxy_send_timeout 90;</span><br><span class="line"></span><br><span class="line">            #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class="line">            #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）</span><br><span class="line">            proxy_read_timeout 90;</span><br><span class="line"></span><br><span class="line">            #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class="line">            #设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小</span><br><span class="line">            proxy_buffer_size 4k;</span><br><span class="line"></span><br><span class="line">            #proxy_buffers缓冲区，网页平均在32k以下的设置</span><br><span class="line">            #设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k</span><br><span class="line">            proxy_buffers 4 32k;</span><br><span class="line"></span><br><span class="line">            #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class="line">            proxy_busy_buffers_size 64k;</span><br><span class="line"></span><br><span class="line">            #设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长</span><br><span class="line">            #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class="line">            proxy_temp_file_write_size 64k;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">        #设定查看Nginx状态的地址</span><br><span class="line">        location /NginxStatus &#123;</span><br><span class="line">            stub_status on;</span><br><span class="line">            access_log on;</span><br><span class="line">            auth_basic &quot;NginxStatus&quot;;</span><br><span class="line">            auth_basic_user_file confpasswd;</span><br><span class="line">            #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        #本地动静分离反向代理配置</span><br><span class="line">        #所有jsp的页面均交由tomcat或resin处理</span><br><span class="line">        location ~ .(jsp|jspx|do)?$ &#123;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_pass http://127.0.0.1:8080;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        #所有静态文件由nginx直接读取不经过tomcat或resin</span><br><span class="line">        location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|</span><br><span class="line">        pdf|xls|mp3|wma)$</span><br><span class="line">        &#123;</span><br><span class="line">            expires 15d; </span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        location ~ .*.(js|css)?$</span><br><span class="line">        &#123;</span><br><span class="line">            expires 1h;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[第一个tensorflow程序]]></title>
      <url>/2017/11/24/%E7%AC%AC%E4%B8%80%E4%B8%AAtensorflow%E7%A8%8B%E5%BA%8F/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://o8bym0zmt.bkt.clouddn.com/alpha_go.png" alt="图片"><br>最近AlphaGo和AlphaZero的出现，预示着2017年成为人工智能元年，人工智能逐渐进入我们的生活和工作的方方面面，如在工作中，阿里巴巴双十一中，出现了“千人千面”智能推荐系统，鲁班AI设计师，小蜜机器人，IDC智能巡检机器人，还有京东的无人仓库等。这些都让我觉得人工智能越来越重要和越来越感兴趣，所以决定学习python和tensorflow。现在就以一个使用tensorflow构建一元线性模型开始我的人工智能学习吧。<br><a id="more"></a></p>
<p>人工智能，机器学习，深度学习关系</p>
<p>人工智能是计算机学科的一个分支，诞生于1956年。机器学习是人工智能的范畴，它包含了深度学习。深度是指多层的意思，模型经过多层的神经网络的训练，不断的学习和调整模型的参数，最后得到最优损失函数最小的模型。深度学习能够有效的处理现实生活中的“非线性”问题。tensorflow是目前最受欢迎的深度学习框架。</p>
<p>几个tensorflow的关键词语，张量，流，计算图。更多的建议阅读：《Tensorflow实战》</p>
<p>下面直接上最简单的一元线性回归模型代码：<br>电脑环境：</p>
<ul>
<li>python版本：3.6.3.</li>
<li>tensorflow版本：cpu版，1.3</li>
<li>window 7 64位</li>
<li>IDE：PyCharm</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line"></span><br><span class="line">session = tf.Session()</span><br><span class="line"># X轴参数</span><br><span class="line">w = tf.Variable([.3], dtype=tf.float32)</span><br><span class="line"># 偏移量</span><br><span class="line">b = tf.Variable([-.3], dtype=tf.float32)</span><br><span class="line"># x轴</span><br><span class="line">x = tf.placeholder(tf.float32)</span><br><span class="line"># 一元线性模型</span><br><span class="line">linear_model = w * x + b</span><br><span class="line"># 实际值</span><br><span class="line">y = tf.placeholder(tf.float32)</span><br><span class="line"># 观测值和实际值的误差的平方差</span><br><span class="line">squared_deltas = tf.square(linear_model - y)</span><br><span class="line"># 最少二乘法。损失函数</span><br><span class="line">loss = tf.reduce_sum(squared_deltas)</span><br><span class="line"># 优化器.优化函数</span><br><span class="line">optimizer = tf.train.GradientDescentOptimizer(0.01)</span><br><span class="line">train = optimizer.minimize(loss)</span><br><span class="line"># 初始化所有的变量</span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">session.run(init)</span><br><span class="line"># 开始训练。训练的过程就是结合优化函数使损失函数的损失最少</span><br><span class="line">x_train = [1,2,3,4]</span><br><span class="line">y_train = [0, -1,-2,-3]</span><br><span class="line">for i in range(1000):</span><br><span class="line">    session.run(train, &#123;x: x_train, y: y_train&#125;)</span><br><span class="line"># 训练的结果</span><br><span class="line">curr_W, curr_b, curr_loss = session.run([w, b, loss], &#123;x: x_train, y: y_train&#125;)</span><br><span class="line">print(&quot;W: %s b: %s loss: %s&quot;%(curr_W, curr_b, curr_loss))</span><br></pre></td></tr></table></figure>
<p>模型输出结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">W: [-0.9999969] b: [ 0.99999082] loss: 5.69997e-11</span><br></pre></td></tr></table></figure></p>
<p>公式表示是：$Y=-0.9999969X + 0.99999082$, 损失为：5.69997e-11</p>
]]></content>
      
        
        <tags>
            
            <tag> tensorflow </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[第一篇博客]]></title>
      <url>/2017/11/24/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p>我想了许久，我建立个人博客网站，第一篇文章应该写什么呢？<br>自从毕业以来，我很久没有写过记录的文章了，加上自己的写作能力，呵呵<br>我是一个在空闲时，总是善于回忆的人。所以我决定将一首高三时对我有深刻影响的词作为博客的第一篇文章。</p>
<p>这首词，在我高三最迷茫自暴自弃的时候，让我重新找到努力的力量，我还可以忘记以前的一切，可以重新开始。无论你之前是如何的失败和消沉，如果你有不计自己的损失，还可以让你的心和脑再次专注，只要坚持挺住，那结果必有回响。</p>
<blockquote>
<p>如果你能倾毕生心血,<br>去冒险进行孤注一掷.<br>失败后一切从头再来,<br>而绝口不提你的损失.<br>如果你曾经消沉许多,<br>还能使你的心脑重又专注.<br>坚持哪怕你一无所有,<br>惟剩一种意志在命令,挺住!</p>
</blockquote>
<p>此词<br>    与大家共勉</p>
<div id="aplayer0" class="aplayer" style="margin-bottom: 20px;"></div>
		<script>
			new APlayer({
				element: document.getElementById("aplayer0"),
				narrow: false,
				autoplay: false,
				showlrc: 0,
				music: {
					title: "够钟",
					author: "周柏豪",
					url: "http://o8bym0zmt.bkt.clouddn.com/%E5%91%A8%E6%9F%8F%E8%B1%AA%20-%20%E5%A4%9F%E9%92%9F.mp3",
					pic: "",
				}
			});
		</script>
]]></content>
      
        
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
